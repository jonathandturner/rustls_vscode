{
    "name": "rust",
    "displayName": "Rust (rls)",
    "description": "Rust language support - code completion, Intellisense, refactoring, reformatting, errors, snippets. A client for the Rust Language Server, built by the RLS team.",
    "version": "0.6.1",
    "publisher": "rust-lang",
    "icon": "rust-icon.png",
    "galleryBanner": {
        "color": "#336356",
        "theme": "dark"
    },
    "engines": {
        "vscode": "^1.31.0"
    },
    "license": "(MIT OR Apache-2.0)",
    "repository": {
        "type": "git",
        "url": "https://github.com/rust-lang-nursery/rls-vscode"
    },
    "bugs": {
        "url": "https://github.com/rust-lang-nursery/rls-vscode/issues"
    },
    "categories": [
        "Programming Languages",
        "Linters",
        "Snippets",
        "Formatters",
        "Other"
    ],
    "keywords": [
        "rust",
        "rust-lang",
        "rls",
        "multi-root ready"
    ],
    "preview": true,
    "activationEvents": [
        "onCommand:workbench.action.tasks.runTask",
        "onLanguage:rust",
        "onDebug",
        "workspaceContains:Cargo.toml"
    ],
    "main": "./out/extension.js",
    "scripts": {
        "vscode:prepublish": "npm run check:version && npm run lint && npm run compile",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "lint": "tslint --config ./tslint.json './src/**/*.ts'",
        "test": "npm run compile && node ./node_modules/vscode/bin/test",
        "prettier": "prettier **/*.ts",
        "check:version": "node cmd/check-version.js",
        "postinstall": "node ./node_modules/vscode/bin/install",
        "installDevExtension": "npm install && ./node_modules/.bin/vsce package -o ./out/rls-vscode-dev.vsix && code --install-extension ./out/rls-vscode-dev.vsix"
    },
    "dependencies": {
        "glob": "^7.1.3",
        "jsonstream": "^1.0.3",
        "vscode-languageclient": "^4.3.0",
        "which": "^1.3.1"
    },
    "devDependencies": {
        "@types/glob": "^7.1.1",
        "@types/jsonstream": "^0.8.30",
        "@types/mocha": "^2.2.43",
        "@types/node": "~10.1.0",
        "@types/which": "^1.3.1",
        "prettier": "^1.16.4",
        "tslint": "^5.14.0",
        "tslint-config-prettier": "^1.18.0",
        "typescript": "^3.0.0",
        "vsce": "^1.58.0",
        "vscode": "^1.1.30"
    },
    "contributes": {
        "breakpoints": [
            {
                "language": "rust"
            }
        ],
        "debuggers": [
            {
                "type": "rust",
                "label": "rust: Launch (GDB / LLDB / VSDebug)",
                "configurationAttributes": {
                    "launch": {
                        "required": [
                            "crate"
                        ],
                        "properties": {
                            "crate": {
                                "type": "string",
                                "decsription": "Crate name.",
                                "default": ""
                            },
                            "targets": {
                                "type": "string",
                                "decsription": "e.g. ",
                                "default": ""
                            },
                            "cwd": {
                                "type": "string",
                                "description": "The working directory of the target",
                                "default": "."
                            },
                            "args": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "JSON array of command line arguments to pass to the program when it is launched. Example [\"arg1\", \"arg2\"].",
                                "default": []
                            },
                            "env": {
                                "type": "object",
                                "description": "Environment variables to add to the environment for the program. Example: { \"RUST_LOG\": \"debug\" }.",
                                "properties": {
                                    "name": "string",
                                    "value": "string"
                                },
                                "default": {}
                            },
                            "pretty": {
                                "type": "boolean",
                                "description": "Enable pretty priting. Enabled by default.",
                                "default": true
                            },
                            "setupCommands": {
                                "type": "array",
                                "description": "One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].\n\nNote that recommended way to enable pretty printing is specifying \"pretty: true,\" instead of using this",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "text": {
                                            "type": "string",
                                            "description": "The debugger command to execute.",
                                            "default": ""
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "Optional description for the command.",
                                            "default": ""
                                        },
                                        "ignoreFailures": {
                                            "type": "boolean",
                                            "description": "If true, failures from the command should be ignored. Default value is false.",
                                            "default": "false"
                                        }
                                    }
                                },
                                "default": []
                            },
                            "launchCompleteCommand": {
                                "enum": [
                                    "exec-run",
                                    "exec-continue",
                                    "None"
                                ],
                                "description": "The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".",
                                "default": "exec-run"
                            },
                            "visualizerFile": {
                                "type": "string",
                                "description": ".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.",
                                "default": ""
                            },
                            "showDisplayString": {
                                "type": "boolean",
                                "description": "When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.",
                                "default": "true"
                            },
                            "MIMode": {
                                "type": "string",
                                "description": "Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".\n\n This is ignored if configured rustup toolchain is msvc.",
                                "default": ""
                            },
                            "miDebuggerPath": {
                                "type": "string",
                                "description": "The path to the mi debugger (such as gdb). When unspecified, it will search path first for the debugger.",
                                "default": ""
                            },
                            "miDebuggerServerAddress": {
                                "type": "string",
                                "description": "Network address of the MI Debugger Server to connect to (example: localhost:1234).",
                                "default": "serveraddress:port"
                            },
                            "stopOnEntry": {
                                "type": "boolean",
                                "description": "Automatically stop after launch.",
                                "default": true
                            },
                            "debugServerPath": {
                                "type": "string",
                                "description": "Optional full path to debug server to launch. Defaults to null.",
                                "default": ""
                            },
                            "debugServerArgs": {
                                "type": "string",
                                "description": "Optional debug server args. Defaults to null.",
                                "default": ""
                            },
                            "serverStarted": {
                                "type": "string",
                                "description": "Optional server-started pattern to look for in the debug server output. Defaults to null.",
                                "default": ""
                            },
                            "filterStdout": {
                                "type": "boolean",
                                "description": "Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.",
                                "default": "true"
                            },
                            "filterStderr": {
                                "type": "boolean",
                                "description": "Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.",
                                "default": "false"
                            },
                            "serverLaunchTimeout": {
                                "type": "integer",
                                "description": "Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.",
                                "default": "10000"
                            },
                            "coreDumpPath": {
                                "type": "string",
                                "description": "Optional full path to a core dump file for the specified program. Defaults to null.",
                                "default": ""
                            },
                            "externalConsole": {
                                "type": "boolean",
                                "description": "If true, a console is launched for the debuggee. If false, no console is launched. Note this option is ignored in some cases for technical reasons.",
                                "default": "false"
                            },
                            "sourceFileMap": {
                                "type": "object",
                                "description": "Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'",
                                "default": {
                                    "<source-path>": "<target-path>"
                                }
                            },
                            "logging": {
                                "type": "object",
                                "description": "Optional flags to determine what types of messages should be logged to the Debug Console.",
                                "default": {},
                                "properties": {
                                    "exceptions": {
                                        "type": "boolean",
                                        "description": "Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.",
                                        "default": true
                                    },
                                    "moduleLoad": {
                                        "type": "boolean",
                                        "description": "Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.",
                                        "default": true
                                    },
                                    "programOutput": {
                                        "type": "boolean",
                                        "description": "Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.",
                                        "default": true
                                    },
                                    "engineLogging": {
                                        "type": "boolean",
                                        "description": "Optional flag to determine whether diagnostic engine logs should be logged to the Debug Console. Defaults to false.",
                                        "default": false
                                    },
                                    "trace": {
                                        "type": "boolean",
                                        "description": "Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.",
                                        "default": false
                                    },
                                    "traceResponse": {
                                        "type": "boolean",
                                        "description": "Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.",
                                        "default": false
                                    }
                                }
                            },
                            "pipeTransport": {
                                "description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).",
                                "type": "object",
                                "default": {
                                    "pipeCwd": "${workspaceRoot}",
                                    "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                                    "pipeArgs": [],
                                    "debuggerPath": "enter the path for the debugger on the target machine, for example /usr/bin/gdb"
                                },
                                "properties": {
                                    "pipeCwd": {
                                        "type": "string",
                                        "description": "The fully qualified path to the working directory for the pipe program.",
                                        "default": "/usr/bin"
                                    },
                                    "pipeProgram": {
                                        "type": "string",
                                        "description": "The fully qualified pipe command to execute.",
                                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                                    },
                                    "pipeArgs": {
                                        "type": "array",
                                        "description": "Command line arguments passed to the pipe program to configure the connection.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "default": []
                                    },
                                    "debuggerPath": {
                                        "type": "string",
                                        "description": "The full path to the debugger on the target machine, for example /usr/bin/gdb.",
                                        "default": "The full path to the debugger on the target machine, for example /usr/bin/gdb."
                                    },
                                    "pipeEnv": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "string"
                                        },
                                        "description": "Environment variables passed to the pipe program.",
                                        "default": {}
                                    }
                                }
                            }
                        }
                    }
                },
                "configurationSnippets": [
                    {
                        "label": "rust: Launch (GDB / LLDB / VSDebug)",
                        "description": "A new configuration for launching a mock debug program",
                        "body": {
                            "type": "rust",
                            "request": "launch",
                            "name": "${2:Launch Program}",
                            "program": "^\"\\${workspaceFolder}/${1:Program}\""
                        }
                    }
                ]
            }
        ],
        "languages": [
            {
                "id": "rust",
                "extensions": [
                    ".rs"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "snippets": [
            {
                "language": "rust",
                "path": "./snippets/rust.json"
            }
        ],
        "commands": [
            {
                "command": "rls.update",
                "title": "Update the RLS",
                "description": "Use Rustup to update Rust, the RLS, and required data",
                "category": "Rust"
            },
            {
                "command": "rls.restart",
                "title": "Restart the RLS",
                "description": "Sometimes, it's just best to try turning it off and on again",
                "category": "Rust"
            }
        ],
        "taskDefinitions": [
            {
                "type": "cargo",
                "properties": {
                    "subcommand": {
                        "type": "string"
                    }
                },
                "required": [
                    "subcommand"
                ]
            }
        ],
        "problemMatchers": [
            {
                "name": "rustc",
                "owner": "rust",
                "fileLocation": [
                    "relative",
                    "${workspaceRoot}"
                ],
                "pattern": [
                    {
                        "regexp": "^(warning|warn|error)(\\[(.*)\\])?: (.*)$",
                        "severity": 1,
                        "message": 4,
                        "code": 3
                    },
                    {
                        "regexp": "^([\\s->=]*(.*):(\\d*):(\\d*)|.*)$",
                        "file": 2,
                        "line": 3,
                        "column": 4
                    },
                    {
                        "regexp": "^.*$"
                    },
                    {
                        "regexp": "^([\\s->=]*(.*):(\\d*):(\\d*)|.*)$",
                        "file": 2,
                        "line": 3,
                        "column": 4
                    }
                ]
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Rust configuration",
            "properties": {
                "rust-client.logToFile": {
                    "type": "boolean",
                    "default": false,
                    "description": "When set to true, RLS stderr is logged to a file at workspace root level. Requires reloading extension after change."
                },
                "rust-client.rustupPath": {
                    "type": "string",
                    "default": "rustup",
                    "description": "Path to rustup executable. Ignored if rustup is disabled."
                },
                "rust-client.useWSL": {
                    "type": "boolean",
                    "default": false,
                    "description": "When set to true, RLS is started within Windows Subsystem for Linux."
                },
                "rust-client.rlsPath": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Override RLS path. Only required for RLS developers. If you set this and use rustup, you should also set `rust-client.channel` to ensure your RLS sees the right libraries. If you don't use rustup, make sure to set `rust-client.disableRustup`."
                },
                "rust-client.revealOutputChannelOn": {
                    "type": "string",
                    "enum": [
                        "info",
                        "warn",
                        "error",
                        "never"
                    ],
                    "default": "never",
                    "description": "Specifies message severity on which the output channel will be revealed. Requires reloading extension after change."
                },
                "rust-client.updateOnStartup": {
                    "type": "boolean",
                    "default": false,
                    "description": "Update the RLS whenever the extension starts up."
                },
                "rust-client.disableRustup": {
                    "type": "boolean",
                    "default": false,
                    "description": "Disable usage of rustup and use rustc/rls from PATH."
                },
                "rust-client.channel": {
                    "type": [
                        "string",
                        null
                    ],
                    "enum": [
                        "stable",
                        "beta",
                        "nightly"
                    ],
                    "default": null,
                    "description": "Rust channel to invoke rustup with. Ignored if rustup is disabled. By default, uses the same channel as your currently open project."
                },
                "rust-client.trace.server": {
                    "type": "string",
                    "enum": [
                        "off",
                        "messages",
                        "verbose"
                    ],
                    "default": "off",
                    "description": "Traces the communication between VS Code and the Rust language server.",
                    "scope": "window"
                },
                "rust-client.nestedMultiRootConfigInOutermost": {
                    "type": "boolean",
                    "default": true,
                    "description": "If one root workspace folder is nested in another root folder, look for the Rust config in the outermost root."
                },
                "rust.sysroot": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "--sysroot",
                    "scope": "resource"
                },
                "rust.target": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "--target",
                    "scope": "resource"
                },
                "rust.rustflags": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Flags added to RUSTFLAGS.",
                    "scope": "resource"
                },
                "rust.clear_env_rust_log": {
                    "type": "boolean",
                    "default": true,
                    "description": "Clear the RUST_LOG environment variable before running rustc or cargo.",
                    "scope": "resource"
                },
                "rust.build_lib": {
                    "type": [
                        "boolean",
                        "null"
                    ],
                    "default": null,
                    "description": "Specify to run analysis as if running `cargo check --lib`. Use `null` to auto-detect. (unstable)",
                    "scope": "resource"
                },
                "rust.build_bin": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "Specify to run analysis as if running `cargo check --bin <name>`. Use `null` to auto-detect. (unstable)",
                    "scope": "resource"
                },
                "rust.cfg_test": {
                    "type": "boolean",
                    "default": false,
                    "description": "Build cfg(test) code. (unstable)",
                    "scope": "resource"
                },
                "rust.unstable_features": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable unstable features.",
                    "scope": "resource"
                },
                "rust.wait_to_build": {
                    "type": "number",
                    "default": 1500,
                    "description": "Time in milliseconds between receiving a change notification and starting build.",
                    "scope": "resource"
                },
                "rust.show_warnings": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show warnings.",
                    "scope": "resource"
                },
                "rust.use_crate_blacklist": {
                    "type": "boolean",
                    "default": true,
                    "description": "Don't index crates on the crate blacklist.",
                    "scope": "resource"
                },
                "rust.build_on_save": {
                    "type": "boolean",
                    "default": false,
                    "description": "Only index the project when a file is saved and not on change.",
                    "scope": "resource"
                },
                "rust.features": {
                    "type": "array",
                    "default": [],
                    "description": "A list of Cargo features to enable.",
                    "scope": "resource"
                },
                "rust.all_features": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable all Cargo features.",
                    "scope": "resource"
                },
                "rust.no_default_features": {
                    "type": "boolean",
                    "default": false,
                    "description": "Do not enable default Cargo features.",
                    "scope": "resource"
                },
                "rust.racer_completion": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enables code completion using racer.",
                    "scope": "resource"
                },
                "rust.clippy_preference": {
                    "type": "string",
                    "enum": [
                        "on",
                        "opt-in",
                        "off"
                    ],
                    "default": "opt-in",
                    "description": "Controls eagerness of clippy diagnostics when available. Valid values are (case-insensitive):\n - \"off\": Disable clippy lints.\n - \"on\": Display the same diagnostics as command-line clippy invoked with no arguments (`clippy::all` unless overridden).\n - \"opt-in\": Only display the lints explicitly enabled in the code. Start by adding `#![warn(clippy::all)]` to the root of each crate you want linted.\nYou need to install clippy via rustup if you haven't already.",
                    "scope": "resource"
                },
                "rust.jobs": {
                    "type": [
                        "number",
                        "null"
                    ],
                    "default": null,
                    "description": "Number of Cargo jobs to be run in parallel.",
                    "scope": "resource"
                },
                "rust.all_targets": {
                    "type": "boolean",
                    "default": true,
                    "description": "Checks the project as if you were running cargo check --all-targets (I.e., check all targets and integration tests too).",
                    "scope": "resource"
                },
                "rust.target_dir": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "When specified, it places the generated analysis files at the specified target directory. By default it is placed target/rls directory.",
                    "scope": "resource"
                },
                "rust.rustfmt_path": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "When specified, RLS will use the Rustfmt pointed at the path instead of the bundled one",
                    "scope": "resource"
                },
                "rust.build_command": {
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null,
                    "description": "EXPERIMENTAL (requires `unstable_features`)\nIf set, executes a given program responsible for rebuilding save-analysis to be loaded by the RLS. The program given should output a list of resulting .json files on stdout. \nImplies `rust.build_on_save`: true.",
                    "scope": "resource"
                },
                "rust.full_docs": {
                    "type": [
                        "boolean",
                        "null"
                    ],
                    "default": null,
                    "description": "Instructs cargo to enable full documentation extraction during save-analysis while building the crate.",
                    "scope": "resource"
                },
                "rust.show_hover_context": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show additional context in hover tooltips when available. This is often the type local variable declaration.",
                    "scope": "resource"
                }
            }
        }
    }
}
