{
    "extern crate": {
        "prefix": "extern crate",
        "body": [
            "extern crate ${1:name};$0"
        ],
        "description": "Insert extern crate"
    },
    "for": {
        "prefix": "for",
        "body": [
            "for $1 in $2 {",
            "\t$0",
            "}"
        ],
        "description": "Insert for loop"
    },
    "fn": {
        "prefix": "fn",
        "body": [
            "fn ${1:name}($2) {",
            "\t${0:unimplemented!()}",
            "}"
        ],
        "description": "Insert function"
    },
    "fnr": {
        "prefix": "fnr",
        "body": [
            "fn ${1:name}($2) -> $3 {",
            "\t${0:unimplemented!()}",
            "}"
        ],
        "description": "Insert function with return values"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if ${1:condition} {",
            "\t$0",
            "}"
        ],
        "description": "Insert if loop"
    },
    "if let Option": {
        "prefix": "if let",
        "body": [
            "if let Some(${1:foo}) = ${1:foo} {",
            "\t${0:${1:foo}.}",
            "}"
        ],
        "description": "Unwrap Option with if let"
    },
    "let": {
        "prefix": "let",
        "body": [
            "let ${1:variable} = ${0:value}"
        ],
        "description": "Insert variable with value"
    },
    "let mut": {
        "prefix": "let mut",
        "body": [
            "let mut ${1:variable} = ${0:value}"
        ],
        "description": "Insert mutable variable with value"
    },
    "loop": {
        "prefix": "loop",
        "body": [
            "loop {",
            "\t$0",
            "}"
        ],
        "description": "Insert infinite loop"
    },
    "assert": {
		"prefix": "assert",
		"body": [
			"assert!($1)$0"
		],
		"description": "Insert assert!"
	},
	"assert_eq": {
		"prefix": "assert_eq",
		"body": [
			"assert_eq!($1, $2)$0"
		],
		"description": "Insert assert_eq!"
	},
    "macro_rules": {
        "prefix": "macro_rules",
        "body": [
            "macro_rules! $1 {",
            "\t($2) => {",
            "\t\t$0",
            "\t};",
            "}"
        ],
        "description": "Insert macro_rules!"
    },
    "main": {
        "prefix": "main",
        "body": [
            "fn main() {",
            "\t${0:unimplemented!()}",
            "}"
        ],
        "description": "Insert main function"
    },
    "match": {
        "prefix": "match",
        "body": [
            "match $1 {",
            "\t$0",
            "}"
        ],
        "description": "Insert match expression"
    },
    "println": {
        "prefix": "println",
        "body": [
            "println!(\"${1:{\\}}\", $0)"
        ],
        "description": "Insert println!"
    },
    "spawn": {
        "prefix": "thread::spawn",
        "body": [
            "thread::spawn(move || {",
            "\t$0",
            "});"
        ],
        "description": "Wrap code in thread::spawn"
    },
    "struct": {
        "prefix": "struct",
        "body": [
            "struct ${1:Name} {",
            "\t$0",
            "}"
        ],
        "description": "Insert a struct"
    },
    "unimplemented": {
        "prefix": "unimplemented",
        "body": [
            "unimplemented!()"
        ],
        "description": "Insert unimplemented!"
    },
    "unreachable": {
        "prefix": "unreachable",
        "body": [
            "unreachable!()"
        ],
        "description": "Insert unreachable!"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while ${1:condition} {",
            "\t$0",
            "}"
        ],
        "description": "Insert while loop"
    }
}
